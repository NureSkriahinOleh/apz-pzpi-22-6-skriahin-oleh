МІНІСТЕРСТВО ОСВІТИ ТА НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ



Кафедра програмної інженерії


ЗВІТ
З дисципліни «Архітектура програмного забезпечення»
З практичного заняття №1
На тему: «Патерни проєктування»



Виконав:
ст. гр. ПЗПІ-22-6
Скрягін О.С.

Перевірив:
Ст. вик. каф. ПІ
Сокорчук І.П.

Харків 2025	
1 ІСТОРІЯ ЗМІН
Таблиця 1.1 – Історія змін 
№	Дата	Версія звіту	Опис змін та виправлень 
1	12.04.2025	0.1	Створено розділ «Історія змін»
2	12.04.2025	0.1	Створено розділ «Завдання»
3	12.04.2025	0.1	Створено розділ “Опис виконаної роботи”
4	12.04.2025	0.1	Створено розділ “Висновки”
5	13.04.2025	0.2	Додані слайди презентації у Додаток Б
6	13.04.2025	0.2	Додані приклади програмного коду у Додаток А
7	13.04.2025	0.2	Додані посилання і хронологічний опис доповіді у Додаток А

 
2 ЗАВДАННЯ
1.	Підготувати доповідь на тему: «Шаблон (патерн) проєктування ПЗ».
2.	Створити та оформити слайди презентації доповіді.
3.	Створити та опублікувати на YouTube відеозапис доповіді.
4.	Оформити та завантажити на dl.nure.ua звіт до виконаної роботи.
5.	При потребі створити та налаштувати у GitHub обліковий запис для облікового запису студента в домені @nure.ua.
6.	Створити для виконання завдань з дисципліни GitHub репозиторій iз вказаним на https://dl.nure.ua іменем та з головною гілкою main.
7.	Створити у корені створеного репозиторію файл README.md з вказаним далі змістом та вказані далі директорії для окремих завдань.
8.	Експортувати звіт у файл у простому текстовому форматі та завантажити цей файл у директорію Pract1 у репозиторії GitHub.
9.	Завантажити у вказану далі піддиректорію увесь програмний код, який розглядається у доповіді ПЗ1.
 
3 ОПИС ВИКОНАНОЇ РОБОТИ
У ході виконання індивідуального завдання було створено презентацію на тему Template Method Pattern, яка охоплює як теоретичні основи, так і практичне застосування даного шаблону проєктування.
Першим етапом роботи було вивчення сутності патерну Template Method, його класифікації в рамках шаблонів проєктування, а також особливостей використання в об’єктно-орієнтованому програмуванні. На основі отриманих знань було підготовлено змістовну структуру презентації, що включає такі розділи, як: визначення патерну, UML-структура, принцип роботи, переваги й недоліки, а також умови доцільного застосування.
Другим етапом стало створення прикладу коду, який ілюструє використання шаблону Template Method на практиці. Приклад реалізовано у вигляді фрагменту цілісного проєкту, де показано, як шаблон дозволяє виділити незмінну частину алгоритму в базовому класі та делегувати конкретні реалізації підкласам.
Окремий слайд презентації містить приклад «поганого» коду — без застосування шаблону, а також його покращену версію із застосуванням Template Method, що демонструє реальну користь цього підходу для покращення якості коду.
 
4 ВИСНОВКИ
У процесі виконання завдання було детально вивчено шаблон проєктування Template Method, його структуру, принцип дії, переваги та недоліки. Було з’ясовано, що цей шаблон є ефективним інструментом для побудови стабільних алгоритмів із можливістю часткової зміни їхніх кроків у підкласах, не порушуючи загальної структури.
Template Method дозволяє уникнути дублювання коду, централізувати контроль за виконанням алгоритму та забезпечити його гнучке розширення. Використання шаблону особливо корисне у випадках, коли необхідно стандартизувати певний процес, водночас залишаючи окремі кроки доступними для зміни.
Отримані знання можуть бути використані в подальшій розробці програмного забезпечення, зокрема при проєктуванні архітектури систем, де важливо чітко розмежовувати стабільну логіку та варіативні елементи процесу.
 
ДОДАТОК А
Посилання на відеозапис доповіді та текст хронологічного опису доповіді
Відеозапис доповіді на YouTube: https://youtu.be/dZfbDDs4d1Y
Хронологічний опис доповіді:
0:00 – Вступна частина
0:18 – Що таке шаблон проєктування
0:46 – Категорія патерну Template Method
1:14 – Визначення Template Method
1:42 – Структура Template Method 
2:33 – Принцип роботи
3:28 – Переваги/Недоліки патерну
4:15 – Коли застосовувати Template Method
4:39 – Template Method у дії
5:30 – Без Template Method — дублювання і ризики
6:42 – Після рефакторингу
7:25 – Висновки
 
ДОДАТОК Б
 
Рисунок Б.1 – Титульний слайд
 
Рисунок Б.2 – Що таке шаблон проєктування (Design Pattern)?
  
Рисунок Б.3 – Категорія патерну Template Method (Behavioral)
 
Рисунок Б.4 – Визначення Template Method

Рисунок Б.5 – Структура Template Method
 
Рисунок Б.6 – Основні компоненти
 
Рисунок Б.7 – Принцип роботи
 
Рисунок Б.8 – Template Method: Детальний огляд
 
Рисунок Б.9 – Переваги патерну
 
Рисунок Б.10 – Недоліки патерну
 
Рисунок Б.11 – Коли застосовувати Template Method
 
Рисунок Б.12 – Template Method у дії
  
Рисунок Б.13 – Без Template Method — дублювання і ризики
 
Рисунок Б.14 – Після рефакторингу
 
Рисунок Б.15 – Висновки
 
ДОДАТОК В
Приклад коду реалізації патерну «Template Method» на Python
1  #Демонстрація застосування патерну Template Method
2  class RequestHandler(ABC):
3      def handle(self, request):
4          if not self.authenticate(request):
5              return Response(status=401, body="Unauthorized")
6  
7          try:
8              data = self.process(request)
9              return Response(status=200, body=data)
10          finally:
11              self.log(request)
12  
13      @abstractmethod
14      def authenticate(self, request):
15          pass
16  
17      @abstractmethod
18      def process(self, request):
19          pass
20  
21      def log(self, request):
22          Logger.log(f"Handled {request.path} for {request.user}")
23          
24  
25  class ProfileRequestHandler(RequestHandler):
26      def authenticate(self, request):
27          return AuthService.check_token(request.headers.get("Authorization"))
28  
29      def process(self, request):
30          profile_service = ProfileService()
31          return profile_service.get_profile(request.user)
32  
33  
34  #Фрагмент коду без викоритання патерну Template Method
35  class DataExportTask:
36      def run(self):
37          ResourceManager.initialize()
38          Logger.log_start("DataExportTask")
39          exporter = ExporterService()
40          exporter.export_users_to_csv()
41          Logger.log_finish("DataExportTask")
42          ResourceManager.cleanup()
43  
44  class DataCleanupTask:
45      def run(self):
46          ResourceManager.initialize()
47          Logger.log_start("DataCleanupTask")
48          cleaner = CleanupService()
49          cleaner.remove_stale_entries()
50          Logger.log_finish("DataCleanupTask")
51          ResourceManager.cleanup()
52  
53  #Фрагмент коду після рефакторингу
54  class TaskRunner(ABC):
55      def run(self):
56          ResourceManager.initialize()
57          Logger.log_start(self.__class__.__name__)
58          self.execute()
59          Logger.log_finish(self.__class__.__name__)
60          ResourceManager.cleanup()
61  
62      @abstractmethod
63      def execute(self):
64          pass
65  
66  class DataExportTask(TaskRunner):
67      def execute(self):
68          exporter = ExporterService()
69          exporter.export_users_to_csv()
70  
71  class DataCleanupTask(TaskRunner):
72      def execute(self):
73          cleaner = CleanupService()
74          cleaner.remove_stale_entries()
