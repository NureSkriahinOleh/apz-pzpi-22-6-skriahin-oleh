МІНІСТЕРСТВО ОСВІТИ ТА НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ



Кафедра програмної інженерії


ЗВІТ
З дисципліни «Архітектура програмного забезпечення»
З лабораторної роботи №5
На тему: «Розгортання програмної системи»


Виконав:								Перевірив:
ст. гр. ПЗПІ-22-6 							доц. Сокорчук І.П.
Скрягін О.С.




Харків 2025 
1 ІСТОРІЯ ЗМІН
Таблиця 1.1 – Історія змін 
№	Дата	Версія звіту	Опис змін та виправлень 
1	06.06.2025	0.1	Створено розділ “Історія змін”
2	05.06.2025	0.1	Створено розділ “Завдання”
3	06.06.2025	0.1	Створено розділ “Опис виконаної роботи”
4	06.06.2025	0.1	Створено розділ “Висновки”
5	05.06.2025	0.1	Додано посилання на відеозапис доповіді та текст хронологічного опису у Додаток А
6	06.06.2025	0.1	Додано код у Додаток Б

 
2	ЗАВДАННЯ
1.	Розгорнути та протестувати програмну систему. 
2.	Відкрити створений на попередній лабораторній роботі репозиторій GitHub. 
3.	Створіть у репозиторії директорію Lab5 та текстовий файл з описом інженерних рішень у цій частині проєкту. 
4.	Зафіксуйте кожну внесену зміну командою git commit з відповідним коментарем та фіксуйте цією командою усі наступні зміни у проекті. 
5.	Створіть у директорії Lab5 піддиректорію для програмного коду. 
6.	Створіть програмний код, завантажте його у створену піддиректорію, зафіксуйте внесені у репозиторій зміни.
7.	Виконайте функціональне тестування створеного програмного коду та створіть відеозапис цього тестування тривалістю 7-10 хвилин з усними поясненнями процесу тестування.
8.	Завантажте створений відеозапис тестування YouTube канал для вашого облікового запису в домені @nure.ua
9.	Створіть для завантаженого запису його хронологічний опис.
10.	Оформіть звіт у форматі pdf та завантажте його на навчальну платформу https://dl.nure.ua/
11.	У коментарях до завантаженого звіту вкажіть посилання на відеозапис тестування у вашому каналі YouTube.

3 ОПИС ВИКОНАНОЇ РОБОТИ
Було розгорнуто та протестовано програмну систему, що складається з фронтенд-частини, серверної частини, мобільного клієнта та IoT-клієнта. Фронтенд реалізовано на стеку Vite + React із використанням бібліотеки Axios для HTTP-запитів, react-i18next для інтернаціоналізації, Recharts для побудови графіків та WebSocket (через кастомний хук) для real-time оновлень даних у інтерфейсі. Стан додатку управляється через React Context (AuthContext для авторизації з JWT-токенами й UIContext для глобальних налаштувань мови та одиниць вимірювання), маршрутизація здійснена за допомогою react-router-dom.
Серверну частину розроблено на Django REST Framework, де налаштовано перевірку JWT-токенів (access і refresh) на кожному запиті та реалізовано CRUD-ендпоінти для моделей Users, Sensors, SensorLogs, IncidentReport, а також спеціальні API для міграцій і резервного копіювання бази даних. 
У PostgreSQL створено таблиці для збереження інформації про користувачів, датчики, журнали зчитувань і повідомлень. Логіка обробки запитів у контролерах включає валідацію даних і контроль прав доступу через налаштування permissions. Окрім REST-API, на сервері налаштовано WebSocket-проксі для трансляції змін у реальному часі (наприклад, оновлень даних сенсорів) до фронтенду. Для зберігання сесій WebSocket-з’єднань і кешування тимчасових даних передбачено можливість використання Redis. Для документації API застосовано OpenAPI/Swagger. 
Мобільний клієнт створено на Android + Kotlin із архітектурою MVVM (ViewModel + LiveData) та бібліотеками Retrofit для HTTP-запитів і Coroutines для асинхронності. JWT-авторизація реалізована через Simple JWT на бекенді, токени зберігаються у SharedPreferences і автоматично додаються до заголовка Authorization у всіх запитах. Інтерфейс оформлено в стилі Material 3, навігація між екранами здійснюється через Android Activities. Для пуш-сповіщень використовується Firebase Cloud Messaging: клієнт отримує унікальний FCM-токен і передає його на сервер для збереження в моделі Device. 
IoT-клієнт моделює роботу сенсорів, спочатку отримуючи список доступних датчиків через API, після чого в циклі генерує значення (нормальні або небезпечні) залежно від налаштувань, виконує перевірку на відхилення від середнього значення для того типу сенсора й у разі виявлення потенційно несправного сенсора надсилає попередження на сервер. Кожне згенероване значення разом із ідентифікатором сенсора передається до сервера, де створюється відповідний лог у базі даних. 
Для розгортання системи використовують Docker та Docker Compose: після клонування репозиторію достатньо виконати команду: docker compose up -d. У конфігурації визначено сервіси для бекенду, фронтенду та WebSocket-проксі (IoT-клієнт може працювати як окремий процес або контейнер). Після запуску сервер стає доступним за адресою 127.0.0.1:8000, фронтенд – за 127.0.0.1:3000. Код розміщено в репозиторії GitHub під контролем версій Git за адресою: https://github.com/NureSkriahinOleh/apz-pzpi-22-6-skriahin-oleh.git.
 
4 ВИСНОВКИ
Було успішно розгорнуто та протестовано фронтенд (Vite + React), бекенд (Django REST Framework + PostgreSQL), мобільний клієнт (Android + Kotlin) та IoT-клієнт (генерація й валідація даних сенсорів). 
ДОДАТОК А
Посилання на відеозапис доповіді та текст хронологічного опису доповіді
Відеозапис доповіді на YouTube: https://youtu.be/-tLuuF82dYY
Хронологічний опис доповіді:
00:00 - Вступна частина.
00:34 - Серверна частина.
01:22 - Адміністрування системи.
03:50 - Веб клієнт.
04:35 - Бізнес логіка веб-клієнту.
05:35 - Запуск IoT-застосунку.
06:51 - Інтернаціоналізація.
07:35 - Зміна одиниці виміру.
08:00 - Адміністрування системи.
09:50 - Адміністрування БД.
11:15 - Мобільний клієнт.
11:40 - Робота з JWT та FCM-токенами.
12:00 - Бізнес логіка мобільного клієнта.
14:15 - PUSH-сповіщення.

ДОДАТОК Б
Програмний код
В.1 Код docker-compose.yml.
GitHub репозиторій: https://github.com/NureSkriahinOleh/apz-pzpi-22-6-skriahin-oleh/blob/main/Lab5/pzpi-22-6-skriahin-oleh-lab5/docker-compose.yml
1    services:
2      db:
3        image: postgres:15
4        container_name: apz_db
5        restart: unless-stopped
6        environment:
7          POSTGRES_DB: SmartShield
8          POSTGRES_USER: postgres
9          POSTGRES_PASSWORD: root
10        volumes:
11          - postgres_data:/var/lib/postgresql/data
12        ports:
13          - "5432:5432"
14    
15      backend:
16        build:
17          context: ./Back/SmartShield
18        container_name: apz_backend
19        volumes:
20          - ./Back/SmartShield:/app
21        ports:
22          - "8000:8000"
23        environment:
24          DJANGO_DB_HOST: db
25          DJANGO_DB_NAME: SmartShield
26          DJANGO_DB_USER: postgres
27          DJANGO_DB_PASSWORD: root
28          DJANGO_DB_PORT: 5432
29          DEBUG: '1'
30          SECRET_KEY: 'your_secret_key_here'
31          ALLOWED_HOSTS: '*'
32        depends_on:
33          - db
34
35      frontend:
36        build:
37          context: ./Front/iot-dashboard
38        container_name: apz_frontend
39        volumes:
40          - ./Front/iot-dashboard:/app
41          - /app/node_modules
42        ports:
43          - "3000:3000"
44        environment:
45          REACT_APP_API_URL: http://localhost:8000
46        depends_on:
47          - backend   
48    volumes:
49      postgres_data:

